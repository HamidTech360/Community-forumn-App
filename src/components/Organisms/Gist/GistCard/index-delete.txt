import React, { useState } from "react";
import timeAge from "time-age";
import { useRouter } from "next/router";
import { Button, Card, Col, Row, Image, NavDropdown } from "react-bootstrap";
import { BsBookmarkDash, BsFolderFill, BsXCircleFill } from "react-icons/bs";
import Link from "next/link";
import Age from "../../../Atoms/Age";
import striptags from "striptags";
import DOMPurify from "dompurify";
import {
  selectFollowing,
  user as userAuth,
  selectUser,
  setFollowers,
  setFollowing,
} from "@/reduxFeatures/authState/authStateSlice";
//import { DirectiveLocation } from "graphql";
import styles from "@/styles/gist.module.scss";
import { HiDotsVertical } from "react-icons/hi";
import { RiDeleteBin5Line, RiFlagFill, RiUserFollowFill } from "react-icons/ri";
import { useDispatch, useSelector } from "@/redux/store";
import { setSlatePostToEdit } from "@/reduxFeatures/app/editSlatePostSlice";
import { setShowGistModal } from "@/reduxFeatures/api/gistSlice";
// interface IGist {
//   gist: {
//     author: {
//       author?: string;
//       image?: string;
//     };
//     title: string;
//     date: string;
//     body: string;
//   };
// }
const GistCard = ({ gist, primary, trimmed }: any) => {
  // console.log(gist);
  const sanitizer = DOMPurify.sanitize;
  const router = useRouter();
  const dispatch = useDispatch();
  const user = useSelector(selectUser);
  const [followed, setFollowed] = useState(false);

  const redirectPage = () => {
    router.push({
      pathname: `/profile/[id]`,
      query: {
        id: gist?.author?._id,
      },
    });
  };

  const handleEditPost = async (post) => {
    // Notify Slate Editor Of Post Editing
    dispatch(setSlatePostToEdit(post));

    if (router?.pathname.includes("gist") || router.asPath === "/gist") {
      // Open Blog Post Modal
      dispatch(setShowGistModal(true));
    }
  };

  return (
    <Card
      className="mt-4 p-3 w-100"
      style={{
        borderRadius: "10px",
        // marginLeft: "-.4rem",
        // marginRight: "-.2rem",
      }}
    >
      <Card.Title>
        <div className="d-flex flex-wrap gap-3 px-2 mb-0 mb-md-2">
          <div className="pt-2 pt-md-3 align-items-center">
            <Image
              src={"/images/imagePlaceholder.jpg"}
              width={50}
              height={50}
              alt="Avatar"
              roundedCircle
              className={styles.img}
              onClick={redirectPage}
              style={{ cursor: "pointer" }}
            />
          </div>
          <div className={` ${styles.div}`}>
            <small
              className={`${styles.title} text-secondary text-capitalize `}
              onClick={redirectPage}
              style={{ cursor: "pointer" }}
            >
              Started by {gist?.author?.firstName} {gist?.author?.lastName}
            </small>
            <br />
            <h5 className={`text-primary mt-1 ${styles.title}`}>
              {gist?.title?.replace("&amp;", "&")}
            </h5>
          </div>

          <div
            className="ms-auto"
            // style={{ marginTop: "-3.4rem" }}
          >
            <NavDropdown
              drop="start"
              title={
                <Button variant="link" className="text-dark" size="sm">
                  <HiDotsVertical size={22} />
                </Button>
              }
              // style={{ marginTop: "-1rem" }}
            >
              {gist.author?._id === user?._id && (
                <>
                  <NavDropdown.Item
                    className={styles.item}
                    style={{
                      borderBottom: "1px solid gray",
                    }}
                    onClick={() => handleEditPost(gist)}
                  >
                    <BsFolderFill /> Edit Post
                  </NavDropdown.Item>

                  <NavDropdown.Item
                    style={{ borderBottom: "1px solid gray" }}
                    // onClick={() => handleDeletePost()}
                  >
                    <span
                      style={{
                        color: "red",
                      }}
                    >
                      <RiDeleteBin5Line /> Delete Post
                    </span>
                  </NavDropdown.Item>
                </>
              )}

              {gist?.author?._id !== user?._id && (
                <>
                  <NavDropdown.Item
                    className={styles.item}
                    style={{ borderBottom: "1px solid gray" }}
                  >
                    <RiFlagFill /> Report post
                  </NavDropdown.Item>

                  <NavDropdown.Item
                    className={styles.item}
                    style={{ borderBottom: "1px solid gray" }}
                    // onClick={async () =>
                    //   changeFollowingStatus(blogPost)
                    // }
                  >
                    {/* {currentlyFollowing.includes(
                              blogPost?.author?._id
                            ) ? ( */}
                    {followed ? (
                      <>
                        <BsXCircleFill />{" "}
                        <span id={`followStr-${gist?.author?._id}-page`}>
                          Unfollow
                        </span>
                      </>
                    ) : (
                      <>
                        <RiUserFollowFill />{" "}
                        <span id={`followStr-${gist?.author?._id}-page`}>
                          Follow
                        </span>
                      </>
                    )}{" "}
                    @{gist?.author?.firstName?.split(" ")[0]}
                    {gist?.author?.lastName?.substring(0, 1)}
                  </NavDropdown.Item>
                </>
              )}
            </NavDropdown>
          </div>
          <div className="ms-5 mb-2 text-muted">
            <small
              className={`d-flex text-center ${styles.time}`}
              style={{ fontSize: "14px" }}
            >
              <Age time={gist?.createdAt} /> <BsBookmarkDash className="ms-2" />
            </small>
          </div>
        </div>
      </Card.Title>

      {gist?.post && (
        <Card.Body
          dangerouslySetInnerHTML={{
            __html: sanitizer(
              trimmed
                ? gist.post.slice(0, 500) || gist.post.slice(0, 500)
                : gist.post || gist.post
            ),
          }}
          style={{
            marginTop: "-1rem",
            lineHeight: "1.3rem",
            whiteSpace: "pre-line",
          }}
        />
      )}

      {!primary && (
        <div className="d-flex justify-content-end mt-2">
          <Link href={`/gist/${gist?._id}`} passHref>
            <Button variant="primary">Join conversation</Button>
          </Link>
        </div>
      )}
    </Card>
  );
};

export default GistCard;
